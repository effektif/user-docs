#
msgid ""
msgstr ""
"Project-Id-Version: User Guide 2.22\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-07-24 10:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

msgid "Custom data connectors"
msgstr ""

msgid ""
"When you define a process in Signavio Workflow Accelerator, you often "
"include your own data in the process definition, such as the list of "
"options for a form field. This works well for small lists that don’t "
"change often or that belong to the process, such as a list of document "
"statuses in a document approval process. However, fixed lists in the "
"process definition become difficult to maintain when the data changes "
"frequently or includes a large number of items, such as a list of "
"products or customers."
msgstr ""

msgid ""
"With Workflow Accelerator, you can also integrate dynamic structured data"
" from other IT systems into your workflows. The workflow system fetches "
"data from a third-party system using a *connector*, which a customer or a"
" partner implements and hosts."
msgstr ""

msgid ""
"A connector provides a web service that translates between the external "
"system and Workflow Accelerator. The connector implements a defined "
"interface, which Workflow Accelerator uses to access data in a format it "
"can use. Workflow Accelerator and the connector communicate over *HTTP* "
"or *HTTPS*, which makes it possible to implement connectors in any "
"programming language."
msgstr ""

msgid "Using a connector"
msgstr ""

msgid ""
"A connector can provide data to :ref:`user-task` form fields. For "
"example, you can create a connector that provides a list of customers, "
"which adds a *Customer* type in the form builder:"
msgstr ""

msgid ""
"A *Customer* connector type in the form builder, at the bottom of the "
"list of field types"
msgstr ""

msgid "A connector reference field:"
msgstr ""

msgid "makes it possible to select from a dynamic list of records"
msgstr ""

msgid "supports auto-complete so you can work with a large number of records"
msgstr ""

msgid "can include structured data for each record."
msgstr ""

msgid "Implementing a connector"
msgstr ""

msgid "To implement a connector, you publish three different kinds of resource."
msgstr ""

msgid ""
":ref:`connector-descriptor` - defines one or more record types, each of "
"which defines a list of fields."
msgstr ""

msgid ""
":ref:`connector-type-options` - a list of records for each record type "
"the connector defines."
msgstr ""

msgid ""
":ref:`connector-type-option` - a single record from the :ref:`connector-"
"type-options` list."
msgstr ""

msgid ""
":ref:`connector-record-details` (optional) - all fields for one record "
"from the list of records."
msgstr ""

msgid ""
"Workflow Accelerator accesses the connector on the web, via the public "
"Internet, or via a private intranet for an on-premise installation. "
"Workflow Accelerator calls the connector’s URL the *endpoint URL*."
msgstr ""

msgid ""
"For example, consider a connector that accesses a fictional customer "
"database, that you publish at the endpoint URL "
"``https://example.org/connector``. In this example, each customer record "
"has the following fields."
msgstr ""

msgid "Example - customer record fields"
msgstr ""

msgid "Property"
msgstr ""

msgid "Description"
msgstr ""

msgid "``id``"
msgstr ""

msgid "Unique identifier"
msgstr ""

msgid "``fullName``"
msgstr ""

msgid "Full name"
msgstr ""

msgid "``email``"
msgstr ""

msgid "Email address"
msgstr ""

msgid "``subscriptionType``"
msgstr ""

msgid "Type of subscription - bronze, silver or gold"
msgstr ""

msgid "``discount``"
msgstr ""

msgid "Default customer discount"
msgstr ""

msgid "``since``"
msgstr ""

msgid "Registration date"
msgstr ""

msgid ""
"A complete example customer record, formatted as *JSON*, would then look "
"like this::"
msgstr ""

msgid ""
"This example now includes enough information to implement a complete "
"connector."
msgstr ""

msgid "Connector descriptor"
msgstr ""

msgid ""
"A connector needs a descriptor to provide basic information, such as its "
"name and description, as well as detailed information about the structure"
" of the data the connector provides. When you implement a connector, you "
"must make the descriptor available as the following HTTP resource."
msgstr ""

msgid "URL"
msgstr ""

msgid "``/`` - the connector’s *endpoint URL*"
msgstr ""

msgid "Request methods"
msgstr ""

msgid "GET - fetches the connector descriptor"
msgstr ""

msgid "Response content type"
msgstr ""

msgid "``application/json``"
msgstr ""

msgid "Response body"
msgstr ""

msgid "A JSON object with the following fields."
msgstr ""

msgid "Connector descriptor properties"
msgstr ""

msgid "``key``"
msgstr ""

msgid ""
"Unique alphanumeric key (characters a-z, A-Z, 0-9) that identifies the "
"connector"
msgstr ""

msgid "``name``"
msgstr ""

msgid "The connector name shown in the user interface"
msgstr ""

msgid "``description``"
msgstr ""

msgid "Detailed connector description"
msgstr ""

msgid "``typeDescriptors``"
msgstr ""

msgid "List of one or more descriptors for record types"
msgstr ""

msgid "``version``"
msgstr ""

msgid ""
"The connector version, which should increase if the provided data "
"structure changes"
msgstr ""

msgid "``protocolVersion``"
msgstr ""

msgid "The connector protocol version, currently ``1``."
msgstr ""

msgid ""
"For example, the JSON response body for a connector descriptor without "
"any type descriptors would look like this::"
msgstr ""

msgid ""
"In our example, you would retrieve the connector descriptor by sending "
"the HTTP request ``GET https://example.org/connector/``."
msgstr ""

msgid ""
"A **record type descriptor** describes the format of the data the "
"connector provides, such as the format of a customer record. In the JSON "
"response, the ``typeDescriptors`` property’s value contains an array of "
"record type descriptor JSON objects."
msgstr ""

msgid "Record type descriptor properties"
msgstr ""

msgid ""
"Unique alphanumeric key (characters a-z, A-Z, 0-9) that identifies the "
"record type within the connector descriptor, used in :ref:`connector-"
"type-options` and :ref:`connector-record-details` URLs"
msgstr ""

msgid "The type name shown in the form builder user interface"
msgstr ""

msgid "``fields``"
msgstr ""

msgid "An array of :ref:`record field descriptors <connector-field-descriptor>`"
msgstr ""

msgid "``optionsAvailable``"
msgstr ""

msgid ""
"Boolean value - ``true`` indicates that the connector provides a list of "
"record options, used to provide a list in the user interface for user "
"selection"
msgstr ""

msgid "``fetchOneAvailable``"
msgstr ""

msgid ""
"Boolean value - ``true`` indicates that Workflow Accelerator can fetch "
"single records by the ID used in the options list"
msgstr ""

msgid ""
"For example, the JSON object for a customer record type descriptor, "
"without any fields, would look like this::"
msgstr ""

msgid ""
"A **record field descriptor** specifies one field of a record type. A "
"record type has a complex structure that includes one or more fields, "
"such as a customer’s full name. Each field has a key, a name and a data "
"type."
msgstr ""

msgid "Record field descriptor properties"
msgstr ""

msgid ""
"Unique alphanumeric key (characters a-z, A-Z, 0-9) that identifies the "
"field type within the record type"
msgstr ""

msgid "The field name shown in the user interface"
msgstr ""

msgid "``type``"
msgstr ""

msgid ""
"A JSON object that describes field’s data type - see :ref:`connector-"
"data-types`"
msgstr ""

msgid ""
"Every record type automatically includes an ``id`` field with type "
"``text``, so you don’t have to define it explicitly."
msgstr ""

msgid ""
"An example for the ``fullName`` of our customer record type looks like "
"this ::"
msgstr ""

msgid "A complete example of our connector descriptor would look like this::"
msgstr ""

msgid "Record type options"
msgstr ""

msgid ""
"When you use a record type on a form, you will see a form field where you"
" can enter a search query and select one of the options shown. Each "
"result represents a record provided by the connector. In order to show a "
"selection of different records to the user, a connector can provide a "
"list of options for a record type."
msgstr ""

msgid ""
"To make a list of options available to forms, in the :ref:`connector-"
"descriptor`, set the ``optionsAvailable`` flag to ``true``. The connector"
" must also make the options available as the following HTTP resource."
msgstr ""

msgid "URL (relative to the endpoint URL)"
msgstr ""

msgid "``/:type/options`` - with path parameter ``:type`` (a record type key)"
msgstr ""

msgid "Query string (optional)"
msgstr ""

msgid ""
"``filter=:query`` - added when the user enters a search; ``:query`` "
"encodes the search string"
msgstr ""

msgid "GET - fetches the list of record type options"
msgstr ""

msgid ""
"An array of JSON objects, which should have a limited maximum length. "
"Each object in the array must have the following fields."
msgstr ""

msgid "Record type options object properties"
msgstr ""

msgid "Unique string record ID"
msgstr ""

msgid ""
"The text label shown in the user interface, which could aggregate "
"multiple record fields like ``fullName (email)``"
msgstr ""

msgid ""
"For example, a list of customer options, with URL "
"``https://example.org/connector/customer/options``, would look like "
"this::"
msgstr ""

msgid "Record type option (single option)"
msgstr ""

msgid ""
"After someone selects an option, the case user interface may later "
"display the selected option in other contexts. Connectors that set the "
"``optionsAvailable`` flag to ``true`` must also make it possible to look "
"up a single option by its ID, in order to display the option name."
msgstr ""

msgid ""
"``/:type/options/:id`` - with path parameters ``:type`` (a record type "
"key) and ``:id`` (the option ID)"
msgstr ""

msgid "GET - fetches a single record type option"
msgstr ""

msgid ""
"A single JSON object, with the same fields as the objects in the :ref"
":`connector-type-options` response."
msgstr ""

msgid ""
"For example, a single customer option, with URL "
"``https://example.org/connector/customer/options/1a2b3c``, would look "
"like this::"
msgstr ""

msgid "Record details"
msgstr ""

msgid ""
"When you use a connector form field to select a record, you can use the "
"record’s data in the workflow. Workflow Accelerator only stores the "
"record’s ID as a reference, and fetches the entire record when needed, "
"when accessing the nested data."
msgstr ""

msgid ""
"To make a record’s fields available, in the :ref:`connector-descriptor`, "
"set the ``fetchOneAvailable`` flag to ``true``. The connector must also "
"make the records available as the following HTTP resource."
msgstr ""

msgid ""
"``/:type/:id`` - with path parameters ``:type`` - a record type key, and "
"``:id`` - a record ID"
msgstr ""

msgid "GET - fetches details for a single record"
msgstr ""

msgid "A JSON object containing all fields of the record with the requested ID."
msgstr ""

msgid ""
"For example, a customer record, with URL "
"``https://example.org/connector/customer/7g8h9i``, would look like this::"
msgstr ""

msgid ""
"Selecting this customer record from the customer options list would give "
"the workflow access to all of this customer’s fields."
msgstr ""

msgid "Data types and formats"
msgstr ""

msgid ""
"A data type defines which kind of value and format a field in a record "
"can have. A type descriptor represents a data type as a JSON object, "
"whose ``name`` property contains the data type name."
msgstr ""

msgid ""
"Data types may use additional properties for type-specific configuration."
" Furthermore, the expected format of a record value depends on the data "
"type."
msgstr ""

msgid "Choice type"
msgstr ""

msgid "A choice type represents a value from a fixed list of configured options."
msgstr ""

msgid "Values"
msgstr ""

msgid "``choice``"
msgstr ""

msgid "``options``"
msgstr ""

msgid ""
"A JSON array of choice option objects, each with ``id`` and ``name`` "
"properties"
msgstr ""

msgid ""
"The ``id`` property stores a unique alphanumeric key (characters a-z, "
"A-Z, 0-9) that identifies the option within the choice type; no two "
"options may have the same ``id``. The user interface shows the ``name`` "
"property’s value to the user."
msgstr ""

msgid ""
"The data type JSON object for a choice type with three options looks like"
" this::"
msgstr ""

msgid "A field value stores the ``id`` property’s value::"
msgstr ""

msgid "Date type"
msgstr ""

msgid ""
"A date represents either a date and time (such as *2012-02-14 09:20*), "
"just a date (*2012-02-14*), or just a time (*09:20*)."
msgstr ""

msgid "``date``"
msgstr ""

msgid "``kind``"
msgstr ""

msgid ""
"``date``, ``time``, ``datetime``; specifies whether the value describes a"
" date, a time of day or both (required)"
msgstr ""

msgid ""
"Date values must always use the ``YYYY-MM-DDThh:mm:ss.SSSZ`` `ISO 8601 "
"<https://en.wikipedia.org/wiki/ISO_8601>`_ date format and the UTC time "
"zone. For example::"
msgstr ""

msgid ""
"All date types use this format - ``datetime``, ``date`` and ``time``. For"
" ``date`` and ``time`` values, execution only uses the first and last "
"parts of the values, respectively."
msgstr ""

msgid "Email address type"
msgstr ""

msgid "An email address type represents an email address."
msgstr ""

msgid "An email address value stores a plain string::"
msgstr ""

msgid "Link type"
msgstr ""

msgid ""
"A link type represents an Internet address (a URL), such as a web site "
"address."
msgstr ""

msgid "A link value stores a plain string::"
msgstr ""

msgid "Money type"
msgstr ""

msgid "A money type represents the combination of an *amount* and a *currency*."
msgstr ""

msgid ""
"A money value stores a JSON object with the fields ``amount`` and "
"``currency``. The ``amount`` property stores a number. The ``currency`` "
"property stores an `ISO 4217 <https://en.wikipedia.org/wiki/ISO_4217>`_ "
"currency code."
msgstr ""

msgid "Number type"
msgstr ""

msgid "A number type represents either an integer or decimal number."
msgstr ""

msgid ""
"A number value stores a plain number, using a single ``.`` as decimal "
"separator."
msgstr ""

msgid "Text type"
msgstr ""

msgid ""
"A text type represents a string - either a single line of text or "
"multiple lines. Optionally, to indicate that text may contain multiple "
"lines, add the flag ``multiLine`` to the data type."
msgstr ""

msgid "``text``"
msgstr ""

msgid "``multiLine``"
msgstr ""

msgid ""
"(optional) if set to ``true`` the text field will allow multiple lines of"
" input"
msgstr ""

msgid "A text value stores a plain string::"
msgstr ""

msgid "Yes/No Checkbox type"
msgstr ""

msgid ""
"A yes/no checkbox type represents a choice between the values ‘yes’ and "
"‘no’."
msgstr ""

msgid "A yes/no checkbox value stores a Boolean value - ``true`` or ``false``."
msgstr ""

msgid "Configuring a connector"
msgstr ""

msgid ""
"To configure connectors, on the top-right menu, select *Services & "
"Connectors*, then select the *Connectors* tab. When you have published "
"your connector, you can add it here."
msgstr ""

msgid "Select *Add new connector* and enter the connector’s endpoint URL."
msgstr ""

msgid ""
"Adding a new connector with the endpoint URL "
"``https://example.org/connector``"
msgstr ""

msgid ""
"When you add a connector, Workflow Accelerator fetches the connector "
"descriptor and shows a summary:"
msgstr ""

msgid "Connector summary, including an overview of record and field types"
msgstr ""

msgid ""
"If you make changes to your connector, such as adding or renaming a "
"field, you need to reload the configuration. On the connector’s top-right"
" menu, select *Reload connector* to fetch the latest version of the "
"descriptor."
msgstr ""

msgid "Deleting a connector"
msgstr ""

msgid ""
"You can delete a connector if you no longer wish to use it. On the "
"connector’s top-right menu, select *Delete connector* to remove its "
"configuration from Workflow Accelerator. If you delete a connector by "
"mistake, select *Add new connector* and enter the endpoint URL again."
msgstr ""

msgid "Authentication"
msgstr ""

msgid ""
"Publishing a connector makes it publicly accessible, as well as any data "
"that the connector provides. To prevent unauthorized access, the "
"connector can implement authentication, so that only Workflow Accelerator"
" can access the data. Connectors may use one of two authentication "
"mechanisms."
msgstr ""

msgid "HTTP Basic authentication"
msgstr ""

msgid ""
"Connectors can use `HTTP basic authentication "
"<https://en.wikipedia.org/wiki/Basic_access_authentication>`_ to restrict"
" access using a user name and password that you specify when configuring "
"the connector. To implement HTTP Basic authentication, your connector "
"endpoints must:"
msgstr ""

msgid ""
"send an HTTP *401 Unauthorized* response, with an empty response body, "
"for any request that does not include valid credentials"
msgstr ""

msgid ""
"check the credentials in the ``Authorization`` HTTP header field, when "
"provided, by decoding the Base64-encoded user name and password and "
"verifying their values."
msgstr ""

msgid ""
"HTTP Basic authentication sends an unencrypted password over the network,"
" so you should only allow access to private connectors via HTTPS."
msgstr ""

msgid ""
"To use basic authentication, use the *Authentication* field to select "
"*HTTP Basic authentication*, and enter a user name and password:"
msgstr ""

msgid "Configuring basic authentication"
msgstr ""

msgid ""
"When you configure a connector to use Basic authentication, Workflow "
"Accelerator will pre-emptively include an ``Authorization`` header when "
"sending requests to the connector endpoints. In Basic authentication, the"
" header value consists of the authentication scheme name ``Basic`` "
"followed by a space and the Base64-encoded user name and password, "
"separated by a colon (``signavio:8n4f-Rm3V-Xz0r-Igew-L1fK``). This "
"results in a request header that looks like::"
msgstr ""

msgid ""
"Sending this header with every request avoids an additional *401 "
"Unauthorized* response and a new request for the authentication "
"challenge."
msgstr ""

msgid "Token authentication"
msgstr ""

msgid ""
"Similar to an API key, you can choose a password (token) that Workflow "
"Accelerator will include in a request header field or URL query string, "
"for every request it sends to the connector endpoints. In the connector "
"configuration, you can choose between a request header field or a URL "
"query string parameter, and specify the header or parameter name."
msgstr ""

msgid ""
"Token authentication sends an unencrypted password over the network, so "
"you should only allow access to private connectors via HTTPS."
msgstr ""

msgid ""
"The connector endpoints can then authenticate requests by checking the "
"respective header field or query string parameter value."
msgstr ""

msgid ""
"To use a token in the request header, use the *Authentication* field to "
"select *HTTP request header*, and enter a header name and header value."
msgstr ""

msgid "Configuring request header authentication"
msgstr ""

msgid ""
"HTTP headers only allow a restricted subset of ASCII characters in header"
" names, which typically only use letters and dashes, such as `Auth-"
"Token`. Header values only support ‘visible ASCII characters’, so to "
"allow arbitrary authentication tokens, use a Base64-encoded value. "
"Configuring token authentication results in a request header like::"
msgstr ""

msgid ""
"For testing, developers may find it more convenient to retrieve the "
"authentication from the URL query string. To use this option, select *URL"
" query parameter* and enter a parameter name and value:"
msgstr ""

msgid "Configuring URL query string parameter authentication"
msgstr ""

msgid "This results in HTTP requests with a URL query string, like this::"
msgstr ""

msgid ""
"HTTP does not encrypt query string parameters, which typically appear in "
"log files, so only use query string token authentication for testing a "
"connector on a trusted network with the on-premise edition of Workflow "
"Accelerator, and switch to a header field token for production use."
msgstr ""

msgid "Connector examples"
msgstr ""

msgid ""
"To help you develop your own connectors, Signavio has published several "
"example connectors that show you what a connector implementation looks "
"like. These examples use several different programming languages, "
"including Java, Python, JavaScript, Scala and Go:"
msgstr ""

msgid "https://github.com/signavio/connector-examples"
msgstr ""

msgid "These examples have an open-source Apache License."
msgstr ""

msgid "JavaScript integration"
msgstr ""

msgid ""
"You can integrate with external systems by writing JavaScript code in a "
":ref:`javascript-action`. Signavio Workflow Accelerator runs the code on "
"the server, using `Node.js <https://nodejs.org>`_. As well as Node.js’ "
"JavaScript API, scripts can use additional libraries (see below)."
msgstr ""

msgid "Script task configuration"
msgstr ""

msgid ""
"After creating or selecting a JavaScript action, the configuration panel "
"looks like this:"
msgstr ""

msgid "JavaScript configuration panel"
msgstr ""

msgid ""
"The top section of the panel contains the JavaScript text editor. By "
"default, it already contains ``console.log('Hello World!');``. Use the "
"`console <https://nodejs.org/dist/latest-v5.x/docs/api/console.html>`_ "
"API for log output when testing scripts."
msgstr ""

msgid "JavaScript libraries"
msgstr ""

msgid ""
"Script tasks support a number of popular JavaScript libraries. To import "
"a package, use our custom ``require`` function:"
msgstr ""

msgid "You can also choose another name for the import:"
msgstr ""

msgid "Supported JavaScript libraries"
msgstr ""

msgid "Library"
msgstr ""

msgid "Import"
msgstr ""

msgid "`CSV <https://www.npmjs.com/package/csv>`_"
msgstr ""

msgid "``csv``"
msgstr ""

msgid "CSV generation, parsing, transformation and serialization"
msgstr ""

msgid "`Lodash <https://www.npmjs.com/package/lodash>`_"
msgstr ""

msgid "``lodash``"
msgstr ""

msgid "Convenience functions for working with collections and values"
msgstr ""

msgid "`moment <https://www.npmjs.com/package/moment>`_"
msgstr ""

msgid "``moment``"
msgstr ""

msgid ""
"Parse, validate, manipulate, and display dates; with `Twix "
"<https://www.npmjs.com/package/twix>`_ date range, and `moment-business-"
"days <https://github.com/kalmecak/moment-business-days>`_ support"
msgstr ""

msgid "`request <https://www.npmjs.com/package/request>`_"
msgstr ""

msgid "``request``"
msgstr ""

msgid "Simplified HTTP request client"
msgstr ""

msgid "`validator <https://www.npmjs.com/package/validator>`_"
msgstr ""

msgid "``validator``"
msgstr ""

msgid "String validation and sanitization"
msgstr ""

msgid ""
"The JavaScript action always imports the ``_`` (Lodash) and ``request`` "
"packages, for backwards compatibility."
msgstr ""

msgid "Testing scripts"
msgstr ""

msgid ""
"The lower section allows you to test the script. Click `Test it` to "
"execute the JavaScript code. The test runner displays the results "
"underneath:"
msgstr ""

msgid "JavaScript test output"
msgstr ""

msgid ""
"The middle section shows the :ref:`process variables <variables>`, "
"starting with just the *Case* variable for a new process. If you add an "
":ref:`email trigger <email-trigger>` to the process, you will also see a "
"*Trigger email* variable."
msgstr ""

msgid "Using process variables"
msgstr ""

msgid ""
"Next, we'll show how to work with data. Suppose that the process includes"
" a form that has each type of field and looks like this:"
msgstr ""

msgid "Form taking input for JavaScript"
msgstr ""

msgid ""
"When you open the JavaScript configuration again, you'll see the "
"variables section shows some of the form field variables."
msgstr ""

msgid "JavaScript variables"
msgstr ""

msgid ""
"Click `Show all fields` and select the variables you want to access in "
"the script. The script can access the variables using the *JavaScript "
"variable* name from the table. To access object variables’ fields, use "
"the field names specified for the corresponding data type: :ref:`Case "
"<case-variable>`, :ref:`type-email`, :ref:`type-file` or :ref:`type-"
"user`."
msgstr ""

msgid ""
"In this example (below), you have selected all variables. For each "
"variable that you select, you get an input field to specify a test value."
" Here you see all fields with a test value."
msgstr ""

msgid "JavaScript test values"
msgstr ""

msgid ""
"When clicking `Test it` again, we can see the JSON structure of the "
"variable data for the different variable types."
msgstr ""

msgid "JavaScript JSON values"
msgstr ""

msgid ""
"The *contract* and *salesRepresentative* variables have complex types, "
":ref:`type-file` and :ref:`type-user`, so the table only shows an ID. The"
" *Updated value* column shows the result of assigning new values to these"
" variables in the script."
msgstr ""

msgid ""
"You can use JavaScript actions to update process variables. Then, you "
"need to make sure you *re-assign* a new value to the variable instead of "
"mutating the variable itself. Otherwise, the system will ignore the "
"update. For example, the system ignores "
"``contactEmails.push('joan.doe@example.org')``, but correctly processes "
"``contactEmails = [].concat([], 'joan.doe@example.org')``. This "
"restriction doesn't apply to variables you only use in the context of the"
" JavaScript task."
msgstr ""

msgid ""
"To access :ref:`file <type-file>` content, you need to require the "
"``files`` API. In this example, ``contract`` is a file variable, which "
"has to be activated for the script task."
msgstr ""

msgid "The following example loads a CSV file and parses its content:"
msgstr ""

msgid "Updating case information"
msgstr ""

msgid ""
"The process variables always include the built-in :ref:`Case <case-"
"variable>` variable, which contains information about the current case. "
"Sometimes, you want to update this case information using data from "
"process variables. You can update some of the this case variable's "
"fields, as follows."
msgstr ""

msgid ""
"A :ref:`case name template <details>` can only use :ref:`form-trigger` "
"fields to set the case name when the process starts. However, when you "
"can set the case name directly in a JavaScript action, you don’t have "
"this restriction."
msgstr ""

msgid "Looking up Workflow Accelerator data"
msgstr ""

msgid ""
"In a JavaScript task, you might need to select a Workflow Accelerator "
"user based on external data, to assign a role. To do this, you can use "
"the built-in ``users`` API to find a user by their email address."
msgstr ""

msgid ""
"This example uses the value of a previously-supplied "
"``reviewerEmailAddress`` :ref:`type-email-address` variable to set a "
"``reviewer`` :ref:`type-user` variable."
msgstr ""

msgid "Calling an external web service"
msgstr ""

msgid ""
"You can use these variables to send data to an external web service, "
"using the `request module "
"<https://github.com/mikeal/request/blob/master/README.md>`_. For example,"
" the following script sends the value of the ``startDate`` variable in an"
" HTTP POST request to an external web service."
msgstr ""

msgid ""
"This example uses a test endpoint configured using `Mocky "
"<http://www.mocky.io/>`_ to return an HTTP response. This has the "
"following result in the Workflow Accelerator test console:"
msgstr ""

msgid "Updating a variable via an external web service"
msgstr ""

msgid ""
"The two log statements, starting with *HTTP 200*, show the HTTP response "
"from the web service. The response body (as set-up in Mocky) contains "
"JSON data that includes an updated value for the ``startDate`` variable, "
"changing the date from ``2015-06-15`` to ``2015-06-16``."
msgstr ""

msgid ""
"The script then parses this JSON response using ``JSON.parse`` and "
"updates the ``startDate`` variable in Workflow Accelerator, as shown in "
"the *Updated value* column in the test console's variables table."
msgstr ""

msgid "Salesforce Integration"
msgstr ""

msgid ""
"Signavio Workflow Accelerator integrates with Salesforce workflows. You "
"can configure this so that changes in Salesforce will automatically "
"trigger Workflow Accelerator processes."
msgstr ""

msgid "Workflow Accelerator configuration"
msgstr ""

msgid ""
"Before you can set-up Salesforce integration, you need to create an "
"endpoint in Workflow Accelerator that Salesforce can send information to."
" Set this up in Workflow Accelerator as follows."
msgstr ""

msgid "In the top-right user menu, select `Services & Connectors`."
msgstr ""

msgid ""
"Under the Salesforce heading, enter a new trigger type name and select "
"`Create`."
msgstr ""

msgid "Copy the generated `Endpoint URL`, or leave this window open for later."
msgstr ""

msgid "Salesforce configuration"
msgstr ""

msgid ""
"Before you can enable Salesforce triggers, you need to configure Outbound"
" messages - a kind of Salesforce workflow action. Set this up in "
"Salesforce as follows."
msgstr ""

msgid ""
"Select the Setup menu item, and select `Build` → `Create` → `Workflow & "
"Approvals` → `Workflow Rules`."
msgstr ""

msgid ""
"Create or edit a new or existing workflow rule, and in the `Workflow "
"Actions` section, select `Edit`."
msgstr ""

msgid ""
"On the `Specify Workflow Actions` page, select `Add Workflow Action` and "
"then `New Outbound Message`."
msgstr ""

msgid ""
"On the `Configure Outbound Message` page, configure the new `Outbound "
"Message`, to define which object fields to send to Workflow Accelerator."
msgstr ""

msgid ""
"In the `Endpoint URL` field, paste the `Endpoint URL` from the Workflow "
"Accelerator configuration you created earlier."
msgstr ""

msgid ""
"Select `Save`. Do not forget to activate the workflow rule as soon as you"
" have finished the configuration. To do this, click the `Activate` button"
" at the top of the `Workflow Rule Detail` page."
msgstr ""

msgid ""
"On the `Outbound message` page, next to `Endpoint WSDL`, select the "
"`Click for WSDL` link, which opens a web service definition file."
msgstr ""

msgid ""
"Save the ``workflowOutboundMessage.wsdl`` file, which you will use to "
"configure Workflow Accelerator, next."
msgstr ""

msgid "Finish Workflow Accelerator configuration"
msgstr ""

msgid ""
"For the final configuration step, use the web service definition file to "
"configure the Salesforce service in Workflow Accelerator."
msgstr ""

msgid ""
"In the top-right user menu, select `Services & Connectors`, and then "
"select the Salesforce trigger type you created earlier."
msgstr ""

msgid ""
"Select `Upload document`, and select the ``workflowOutboundMessage.wsdl``"
" file you saved earlier."
msgstr ""

msgid ""
"Now you can use the new :ref:`Salesforce trigger <trigger-salesforce>` in"
" Workflow Accelerator."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Effektif configuration"
#~ msgstr ""

#~ msgid "Finish Effektif configuration"
#~ msgstr ""

#~ msgid "A complete example our connector descriptor would look like this: ::"
#~ msgstr ""

#~ msgid "Using connectors"
#~ msgstr ""

#~ msgid "The"
#~ msgstr ""

#~ msgid "The connector is available"
#~ msgstr ""

#~ msgid "A complete example our connector descriptor would look like this::"
#~ msgstr ""

#~ msgid "``id`` - a unique identifier"
#~ msgstr ""

#~ msgid "``fullName`` - the name of the customer"
#~ msgstr ""

#~ msgid "``email`` - the email address of the customer"
#~ msgstr ""

#~ msgid "``discount`` - the default discount for the customer"
#~ msgstr ""

#~ msgid "``since`` - the registration date"
#~ msgstr ""

#~ msgid "Customer example fields"
#~ msgstr ""

#~ msgid "``key`` - a unique key which identifies the connector"
#~ msgstr ""

#~ msgid "``name`` - a name for the connector which is shown in the UI"
#~ msgstr ""

#~ msgid "``description`` - a more detailed description of the connector"
#~ msgstr ""

#~ msgid "``version`` - the version of the connector"
#~ msgstr ""

#~ msgid "``protocolVersion`` - the version of the used connector protocol"
#~ msgstr ""

#~ msgid "the current version is ``1``"
#~ msgstr ""

#~ msgid "Unique key which identifies the connector"
#~ msgstr ""

#~ msgid "a name for the connector which is shown in the UI"
#~ msgstr ""

#~ msgid "a more detailed description of the connector"
#~ msgstr ""

#~ msgid "a list of one or more descriptors for record types"
#~ msgstr ""

#~ msgid "The connector protocol version"
#~ msgstr ""

#~ msgid "The current version is ``1``"
#~ msgstr ""

#~ msgid "Unique key which identifies the connector."
#~ msgstr ""

#~ msgid "Keys use use alphanumeric characters (a-z, A-Z, 0-9)"
#~ msgstr ""

#~ msgid "The connector protocol version."
#~ msgstr ""

#~ msgid "The current version is ``1``."
#~ msgstr ""

#~ msgid "``key`` - a unique identifier within the connector descriptor"
#~ msgstr ""

#~ msgid "``name`` - the name of the type which is shown in the form editor"
#~ msgstr ""

#~ msgid "if set to ``true``, records selected before can be fetched"
#~ msgstr ""

#~ msgid "Record type descriptor"
#~ msgstr ""

#~ msgid "Record field descriptor"
#~ msgstr ""

#~ msgid "``key`` - a unique identifier within the record type"
#~ msgstr ""

#~ msgid "``name`` - the name of the field which will be shown in the UI"
#~ msgstr ""

#~ msgid "``type`` - the data type of the field, see :ref:`connector-data-types`"
#~ msgstr ""

#~ msgid "Field name"
#~ msgstr ""

#~ msgid "Connector descriptor fields"
#~ msgstr ""

#~ msgid "Record type descriptor fields"
#~ msgstr ""

#~ msgid "Record field descriptor fields"
#~ msgstr ""

#~ msgid "``id`` - matches the ``id`` of the actual record"
#~ msgstr ""

#~ msgid "``name`` - any text that will be shown to the user"
#~ msgstr ""

#~ msgid "1"
#~ msgstr ""

#~ msgid "For our customer example the option list would like this::"
#~ msgstr ""

#~ msgid "``GET /``"
#~ msgstr ""

#~ msgid "provides the connector descriptor, see :ref:`connector-descriptor`"
#~ msgstr ""

#~ msgid "``type`` : name of the data type"
#~ msgstr ""

#~ msgid "``type`` - ``choice``"
#~ msgstr ""

#~ msgid "``type`` - ``date``"
#~ msgstr ""

#~ msgid "``type`` - ``emailAddress``"
#~ msgstr ""

#~ msgid "``type`` - ``link``"
#~ msgstr ""

#~ msgid "``type`` - ``money``"
#~ msgstr ""

#~ msgid "``type`` - ``number``"
#~ msgstr ""

#~ msgid "``type`` - ``text``"
#~ msgstr ""

#~ msgid "``type`` - ``boolean``"
#~ msgstr ""

#~ msgid "``GET /`` the :ref:`connector-descriptor`"
#~ msgstr ""

#~ msgid "``GET /:typeKey/options?filter=:filterValue``"
#~ msgstr ""

#~ msgid "``GET /:typeKey/:id``"
#~ msgstr ""

#~ msgid "provides a single record of the specifed type"
#~ msgstr ""

#~ msgid "``GET /`` - the :ref:`connector-descriptor`"
#~ msgstr ""

#~ msgid "``:typeKey`` represents the chosen key for a type descriptor"
#~ msgstr ""

#~ msgid "``:filterValue`` is the search query entered by the user"
#~ msgstr ""

#~ msgid "the returned list of options should have a limited size"
#~ msgstr ""

#~ msgid "``GET /:typeKey/:id`` - a single record of the specifed type"
#~ msgstr ""

#~ msgid "``:id`` represents the unique of the record"
#~ msgstr ""

#~ msgid "Property name"
#~ msgstr ""

#~ msgid "Default discount"
#~ msgstr ""

#~ msgid "The response body must be an array of JSON objects."
#~ msgstr ""

#~ msgid "**TODO:**"
#~ msgstr ""

#~ msgid "The type name shown in the form editor user interface"
#~ msgstr ""

#~ msgid "A record field descriptor specifies one data field of a record type."
#~ msgstr ""

#~ msgid "The field’s data type - see :ref:`connector-data-types`"
#~ msgstr ""

#~ msgid "{"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "An array of :ref:`field descriptors <connector-field-descriptor>`"
#~ msgstr ""

#~ msgid "Unique option identifier - matches the ``id`` of the actual record"
#~ msgstr ""

#~ msgid "``name`` - ``choice``"
#~ msgstr ""

#~ msgid "``options`` - an array of choice options"
#~ msgstr ""

#~ msgid "``name`` - ``date``"
#~ msgstr ""

#~ msgid "``time``"
#~ msgstr ""

#~ msgid "``datetime``"
#~ msgstr ""

#~ msgid "``name`` - ``emailAddress``"
#~ msgstr ""

#~ msgid "The record value must be a plain string."
#~ msgstr ""

#~ msgid "``name`` - ``link``"
#~ msgstr ""

#~ msgid "A money value is a combination of an ``amount`` and a ``currency``."
#~ msgstr ""

#~ msgid "``name`` - ``money``"
#~ msgstr ""

#~ msgid "A number can be either an integer or a decimal."
#~ msgstr ""

#~ msgid "``name`` - ``number``"
#~ msgstr ""

#~ msgid "``name`` - ``text``"
#~ msgstr ""

#~ msgid "``name`` - ``boolean``"
#~ msgstr ""

#~ msgid "Connector"
#~ msgstr ""

#~ msgid "HTTP basic authentication,"
#~ msgstr ""

#~ msgid "provide username and password"
#~ msgstr ""

#~ msgid "token authorization"
#~ msgstr ""

#~ msgid "provide name and token"
#~ msgstr ""

#~ msgid "specify location (header or query parameter)"
#~ msgstr ""

#~ msgid "The response body must be a JSON object with the following fields."
#~ msgstr ""

#~ msgid "The connector protocol version. The current version is ``1``."
#~ msgstr ""

#~ msgid "signavio 8n4f-Rm3V-Xz0r-Igew-L1fK"
#~ msgstr ""

#~ msgid "Authorization: Basic c2lnbmF2aW86OG40Zi1SbTNWLVh6MHItSWdldy1MMWZL"
#~ msgstr ""

#~ msgid "Request header authentication"
#~ msgstr ""

#~ msgid "X-Auth-Token OG40Zi1SbTNWLVh6MHItSWdldy1MMWZL"
#~ msgstr ""

#~ msgid "URL query parameter authentication"
#~ msgstr ""

#~ msgid "token OG40Zi1SbTNWLVh6MHItSWdldy1MMWZL"
#~ msgstr ""

#~ msgid "Example - customer record fields"
#~ msgstr ""

#~ msgid "Connector descriptor properties"
#~ msgstr ""

#~ msgid "Record type descriptor properties"
#~ msgstr ""

#~ msgid "Record field descriptor properties"
#~ msgstr ""

#~ msgid "Record type options object properties"
#~ msgstr ""

#~ msgid "Supported JavaScript libraries"
#~ msgstr ""

#~ msgid "The response body must contain a JSON object with the following fields."
#~ msgstr ""

#~ msgid "``/:type/options`` - with path parameter ``:type`` - a record type key"
#~ msgstr ""

#~ msgid "Updating case variables"
#~ msgstr ""

#~ msgid "Looking up Signavio Workflow data"
#~ msgstr ""

#~ msgid "Signavio Workflow configuration"
#~ msgstr ""

#~ msgid "Finish Signavio Workflow configuration"
#~ msgstr ""

#~ msgid ""
#~ "In the top-right user menu, select"
#~ " `My Organisation` and then select "
#~ "the `Services` tab."
#~ msgstr ""

#~ msgid ""
#~ "In the top-right user menu, select"
#~ " `My Organisation`, select the `Services`"
#~ " tab, and then select the Salesforce"
#~ " trigger type you created earlier."
#~ msgstr ""

#~ msgid ""
#~ "The ``_`` (Lodash) and ``request`` "
#~ "packages are always imported, for "
#~ "backwards compatibility."
#~ msgstr ""

#~ msgid ""
#~ "Parse, validate, manipulate, and display "
#~ "dates; with `Twix "
#~ "<https://www.npmjs.com/package/twix>`_ date range "
#~ "support"
#~ msgstr ""

#~ msgid ""
#~ "The process variables always include the"
#~ " built-in :ref:`Case <case-variable>` "
#~ "variable, which contains information about "
#~ "the current case. Sometimes, you want"
#~ " to update this case information "
#~ "using data from process variables. You"
#~ " can update some of the this "
#~ "case variable’s fields, as follows."
#~ msgstr ""

#~ msgid ""
#~ "The script then parses this JSON "
#~ "response using ``JSON.parse`` and updates "
#~ "the ``startDate`` variable in Workflow "
#~ "Accelerator, as shown in the *Updated"
#~ " value* column in the test console’s"
#~ " variables table."
#~ msgstr ""

#~ msgid ""
#~ "You can use JavaScript actions to "
#~ "update workflow variables. Then, you "
#~ "need to make sure you *re-assign*"
#~ " a new value to the variable "
#~ "instead of mutating the variable itself."
#~ " Otherwise, the system will ignore "
#~ "the update. For example, the system "
#~ "ignores ``contactEmails.push('joan.doe@example.org')``, "
#~ "but correctly processes ``contactEmails = "
#~ "[].concat([], 'joan.doe@example.org')``. This "
#~ "restriction doesn't apply to variables "
#~ "you only use in the context of "
#~ "the JavaScript task."
#~ msgstr ""

